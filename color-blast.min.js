'use strict';
var canvasContainer = document.createElement('canvas');
(canvasContainer.id = 'blast-off'), document.body.prepend(canvasContainer);
const canvas = document.getElementById('blast-off');
resizeCanvas();
var config = {
	SIM_RESOLUTION: 128,
	DYE_RESOLUTION: 1024,
	CAPTURE_RESOLUTION: 512,
	DENSITY_DISSIPATION: 4,
	VELOCITY_DISSIPATION: 2,
	PRESSURE: 0.8,
	PRESSURE_ITERATIONS: 20,
	CURL: 0,
	SPLAT_RADIUS: 0.1,
	SPLAT_FORCE: 6e3,
	SHADING: !0,
	COLORFUL: !0,
	COLOR_UPDATE_SPEED: 10,
	PAUSED: !1,
	BACK_COLOR: { r: 0, g: 0, b: 0 },
	TRANSPARENT: !1,
	BLOOM: !1,
	BLOOM_ITERATIONS: 8,
	BLOOM_RESOLUTION: 256,
	BLOOM_INTENSITY: 0.8,
	BLOOM_THRESHOLD: 0.6,
	BLOOM_SOFT_KNEE: 0.7,
	SUNRAYS: !0,
	SUNRAYS_RESOLUTION: 196,
	SUNRAYS_WEIGHT: 1,
};
if (window.blastOff && 'object' == typeof window.blastOff)
	for (var key in window.blastOff)
		window.blastOff.hasOwnProperty(key) && (config[key] = window.blastOff[key]);
function pointerPrototype() {
	(this.id = -1),
		(this.texcoordX = 0),
		(this.texcoordY = 0),
		(this.prevTexcoordX = 0),
		(this.prevTexcoordY = 0),
		(this.deltaX = 0),
		(this.deltaY = 0),
		(this.down = !1),
		(this.moved = !1),
		(this.color = [30, 0, 300]);
}
var pointers = [];
pointers.push(new pointerPrototype());
var ref = getWebGLContext(canvas),
	gl = ref.gl,
	ext = ref.ext;
function getWebGLContext(t) {
	var e,
		r,
		n = {
			alpha: !0,
			depth: !1,
			stencil: !1,
			antialias: !1,
			preserveDrawingBuffer: !1,
		},
		i = t.getContext('webgl2', n),
		o = !!i;
	o || (i = t.getContext('webgl', n) || t.getContext('experimental-webgl', n)),
		o
			? (i.getExtension('EXT_color_buffer_float'),
			  (r = i.getExtension('OES_texture_float_linear')))
			: ((e = i.getExtension('OES_texture_half_float')),
			  (r = i.getExtension('OES_texture_half_float_linear'))),
		i.clearColor(0, 0, 0, 1);
	var a,
		l,
		u,
		c = o ? i.HALF_FLOAT : e.HALF_FLOAT_OES;
	return (
		o
			? ((a = getSupportedFormat(i, i.RGBA16F, i.RGBA, c)),
			  (l = getSupportedFormat(i, i.RG16F, i.RG, c)),
			  (u = getSupportedFormat(i, i.R16F, i.RED, c)))
			: ((a = getSupportedFormat(i, i.RGBA, i.RGBA, c)),
			  (l = getSupportedFormat(i, i.RGBA, i.RGBA, c)),
			  (u = getSupportedFormat(i, i.RGBA, i.RGBA, c))),
		{
			gl: i,
			ext: {
				formatRGBA: a,
				formatRG: l,
				formatR: u,
				halfFloatTexType: c,
				supportLinearFiltering: r,
			},
		}
	);
}
function getSupportedFormat(t, e, r, n) {
	if (!supportRenderTextureFormat(t, e, r, n))
		switch (e) {
			case t.R16F:
				return getSupportedFormat(t, t.RG16F, t.RG, n);
			case t.RG16F:
				return getSupportedFormat(t, t.RGBA16F, t.RGBA, n);
			default:
				return null;
		}
	return { internalFormat: e, format: r };
}
function supportRenderTextureFormat(t, e, r, n) {
	var i = t.createTexture();
	t.bindTexture(t.TEXTURE_2D, i),
		t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.NEAREST),
		t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.NEAREST),
		t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
		t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
		t.texImage2D(t.TEXTURE_2D, 0, e, 4, 4, 0, r, n, null);
	var o = t.createFramebuffer();
	return (
		t.bindFramebuffer(t.FRAMEBUFFER, o),
		t.framebufferTexture2D(
			t.FRAMEBUFFER,
			t.COLOR_ATTACHMENT0,
			t.TEXTURE_2D,
			i,
			0
		),
		t.checkFramebufferStatus(t.FRAMEBUFFER) == t.FRAMEBUFFER_COMPLETE
	);
}
function isMobile() {
	return /Mobi|Android/i.test(navigator.userAgent);
}
function framebufferToTexture(t) {
	gl.bindFramebuffer(gl.FRAMEBUFFER, t.fbo);
	var e = t.width * t.height * 4,
		r = new Float32Array(e);
	return gl.readPixels(0, 0, t.width, t.height, gl.RGBA, gl.FLOAT, r), r;
}
function normalizeTexture(t, e, r) {
	for (var n = new Uint8Array(t.length), i = 0, o = r - 1; o >= 0; o--)
		for (var a = 0; a < e; a++) {
			var l = o * e * 4 + 4 * a;
			(n[l + 0] = 255 * clamp01(t[i + 0])),
				(n[l + 1] = 255 * clamp01(t[i + 1])),
				(n[l + 2] = 255 * clamp01(t[i + 2])),
				(n[l + 3] = 255 * clamp01(t[i + 3])),
				(i += 4);
		}
	return n;
}
function clamp01(t) {
	return Math.min(Math.max(t, 0), 1);
}
function textureToCanvas(t, e, r) {
	var n = document.createElement('canvas'),
		i = n.getContext('2d');
	(n.width = e), (n.height = r);
	var o = i.createImageData(e, r);
	return o.data.set(t), i.putImageData(o, 0, 0), n;
}
isMobile() && (config.DYE_RESOLUTION = 512),
	ext.supportLinearFiltering ||
		((config.DYE_RESOLUTION = 512),
		(config.SHADING = !1),
		(config.BLOOM = !1),
		(config.SUNRAYS = !1));
var Material = function (t, e) {
	(this.vertexShader = t),
		(this.fragmentShaderSource = e),
		(this.programs = []),
		(this.activeProgram = null),
		(this.uniforms = []);
};
(Material.prototype.setKeywords = function (t) {
	for (var e = 0, r = 0; r < t.length; r++) e += hashCode(t[r]);
	var n = this.programs[e];
	if (null == n) {
		var i = compileShader(gl.FRAGMENT_SHADER, this.fragmentShaderSource, t);
		(n = createProgram(this.vertexShader, i)), (this.programs[e] = n);
	}
	n != this.activeProgram &&
		((this.uniforms = getUniforms(n)), (this.activeProgram = n));
}),
	(Material.prototype.bind = function () {
		gl.useProgram(this.activeProgram);
	});
var Program = function (t, e) {
	(this.uniforms = {}),
		(this.program = createProgram(t, e)),
		(this.uniforms = getUniforms(this.program));
};
function createProgram(t, e) {
	var r = gl.createProgram();
	if (
		(gl.attachShader(r, t),
		gl.attachShader(r, e),
		gl.linkProgram(r),
		!gl.getProgramParameter(r, gl.LINK_STATUS))
	)
		throw gl.getProgramInfoLog(r);
	return r;
}
function getUniforms(t) {
	for (
		var e = [], r = gl.getProgramParameter(t, gl.ACTIVE_UNIFORMS), n = 0;
		n < r;
		n++
	) {
		var i = gl.getActiveUniform(t, n).name;
		e[i] = gl.getUniformLocation(t, i);
	}
	return e;
}
function compileShader(t, e, r) {
	e = addKeywords(e, r);
	var n = gl.createShader(t);
	if (
		(gl.shaderSource(n, e),
		gl.compileShader(n),
		!gl.getShaderParameter(n, gl.COMPILE_STATUS))
	)
		throw gl.getShaderInfoLog(n);
	return n;
}
function addKeywords(t, e) {
	if (null == e) return t;
	var r = '';
	return (
		e.forEach(function (t) {
			r += '#define ' + t + '\n';
		}),
		r + t
	);
}
Program.prototype.bind = function () {
	gl.useProgram(this.program);
};
var dye,
	velocity,
	divergence,
	curl,
	pressure,
	bloom,
	sunrays,
	sunraysTemp,
	baseVertexShader = compileShader(
		gl.VERTEX_SHADER,
		'\n\t\tprecision highp float;\n\n\t\tattribute vec2 aPosition;\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tvarying vec2 vT;\n\t\tvarying vec2 vB;\n\t\tuniform vec2 texelSize;\n\n\t\tvoid main() {\n\t\t\tvUv = aPosition * 0.5 + 0.5;\n\t\t\tvL = vUv - vec2(texelSize.x, 0.0);\n\t\t\tvR = vUv + vec2(texelSize.x, 0.0);\n\t\t\tvT = vUv + vec2(0.0, texelSize.y);\n\t\t\tvB = vUv - vec2(0.0, texelSize.y);\n\t\t\tgl_Position = vec4(aPosition, 0.0, 1.0);\n\t\t}\n\t'
	),
	blurVertexShader = compileShader(
		gl.VERTEX_SHADER,
		'\n\t\tprecision highp float;\n\n\t\tattribute vec2 aPosition;\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tuniform vec2 texelSize;\n\n\t\tvoid main() {\n\t\t\tvUv = aPosition * 0.5 + 0.5;\n\t\t\tfloat offset = 1.33333333;\n\t\t\tvL = vUv - texelSize * offset;\n\t\t\tvR = vUv + texelSize * offset;\n\t\t\tgl_Position = vec4(aPosition, 0.0, 1.0);\n\t\t}\n\t'
	),
	blurShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tuniform sampler2D uTexture;\n\n\t\tvoid main() {\n\t\t\tvec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n\t\t\tsum += texture2D(uTexture, vL) * 0.35294117;\n\t\t\tsum += texture2D(uTexture, vR) * 0.35294117;\n\t\t\tgl_FragColor = sum;\n\t\t}\n\t'
	),
	copyShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = texture2D(uTexture, vUv);\n\t\t}\n\t'
	),
	clearShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\t\tuniform float value;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = value * texture2D(uTexture, vUv);\n\t\t}\n\t'
	),
	colorShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\n\t\tuniform vec4 color;\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = color;\n\t\t}\n\t'
	),
	checkerboardShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\t\tuniform float aspectRatio;\n\n\t\t#define SCALE 25.0\n\n\t\tvoid main() {\n\t\t\tvec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n\t\t\tfloat v = mod(uv.x + uv.y, 2.0);\n\t\t\tv = v * 0.1 + 0.8;\n\t\t\tgl_FragColor = vec4(vec3(v), 1.0);\n\t\t}\n\t'
	),
	displayShaderSource =
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tvarying vec2 vT;\n\t\tvarying vec2 vB;\n\t\tuniform sampler2D uTexture;\n\t\tuniform sampler2D uBloom;\n\t\tuniform sampler2D uSunrays;\n\t\tuniform sampler2D uDithering;\n\t\tuniform vec2 ditherScale;\n\t\tuniform vec2 texelSize;\n\n\t\tvec3 linearToGamma (vec3 color) {\n\t\t\tcolor = max(color, vec3(0));\n\t\t\treturn max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n\t\t}\n\n\t\tvoid main() {\n\t\t\tvec3 c = texture2D(uTexture, vUv).rgb;\n\n\t\t\t#ifdef SHADING\n\t\t\t\tvec3 lc = texture2D(uTexture, vL).rgb;\n\t\t\t\tvec3 rc = texture2D(uTexture, vR).rgb;\n\t\t\t\tvec3 tc = texture2D(uTexture, vT).rgb;\n\t\t\t\tvec3 bc = texture2D(uTexture, vB).rgb;\n\n\t\t\t\tfloat dx = length(rc) - length(lc);\n\t\t\t\tfloat dy = length(tc) - length(bc);\n\n\t\t\t\tvec3 n = normalize(vec3(dx, dy, length(texelSize)));\n\t\t\t\tvec3 l = vec3(0.0, 0.0, 1.0);\n\n\t\t\t\tfloat diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n\t\t\t\tc *= diffuse;\n\t\t\t#endif\n\n\t\t\t#ifdef BLOOM\n\t\t\t\tvec3 bloom = texture2D(uBloom, vUv).rgb;\n\t\t\t#endif\n\n\t\t\t#ifdef SUNRAYS\n\t\t\t\tfloat sunrays = texture2D(uSunrays, vUv).r;\n\t\t\t\tc *= sunrays;\n\n\t\t\t\t#ifdef BLOOM\n\t\t\t\t\tbloom *= sunrays;\n\t\t\t\t#endif\n\t\t\t#endif\n\n\t\t\t#ifdef BLOOM\n\t\t\t\tfloat noise = texture2D(uDithering, vUv * ditherScale).r;\n\t\t\t\tnoise = noise * 2.0 - 1.0;\n\t\t\t\tbloom += noise / 255.0;\n\t\t\t\tbloom = linearToGamma(bloom);\n\t\t\t\tc += bloom;\n\t\t\t#endif\n\n\t\t\tfloat a = max(c.r, max(c.g, c.b));\n\t\t\tgl_FragColor = vec4(c, a);\n\t\t}\n\t',
	bloomPrefilterShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\t\tuniform vec3 curve;\n\t\tuniform float threshold;\n\n\t\tvoid main() {\n\t\t\tvec3 c = texture2D(uTexture, vUv).rgb;\n\t\t\tfloat br = max(c.r, max(c.g, c.b));\n\t\t\tfloat rq = clamp(br - curve.x, 0.0, curve.y);\n\t\t\trq = curve.z * rq * rq;\n\t\t\tc *= max(rq, br - threshold) / max(br, 0.0001);\n\t\t\tgl_FragColor = vec4(c, 0.0);\n\t\t}\n\t'
	),
	bloomBlurShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tvarying vec2 vT;\n\t\tvarying vec2 vB;\n\t\tuniform sampler2D uTexture;\n\n\t\tvoid main() {\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uTexture, vL);\n\t\t\tsum += texture2D(uTexture, vR);\n\t\t\tsum += texture2D(uTexture, vT);\n\t\t\tsum += texture2D(uTexture, vB);\n\t\t\tsum *= 0.25;\n\t\t\tgl_FragColor = sum;\n\t\t}\n\t'
	),
	bloomFinalShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tvarying vec2 vT;\n\t\tvarying vec2 vB;\n\t\tuniform sampler2D uTexture;\n\t\tuniform float intensity;\n\n\t\tvoid main() {\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uTexture, vL);\n\t\t\tsum += texture2D(uTexture, vR);\n\t\t\tsum += texture2D(uTexture, vT);\n\t\t\tsum += texture2D(uTexture, vB);\n\t\t\tsum *= 0.25;\n\t\t\tgl_FragColor = sum * intensity;\n\t\t}\n\t'
	),
	sunraysMaskShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\n\t\tvoid main() {\n\t\t\tvec4 c = texture2D(uTexture, vUv);\n\t\t\tfloat br = max(c.r, max(c.g, c.b));\n\t\t\tc.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n\t\t\tgl_FragColor = c;\n\t\t}\n\t'
	),
	sunraysShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uTexture;\n\t\tuniform float weight;\n\n\t\t#define ITERATIONS 16\n\n\t\tvoid main() {\n\t\t\tfloat Density = 0.3;\n\t\t\tfloat Decay = 0.95;\n\t\t\tfloat Exposure = 0.7;\n\n\t\t\tvec2 coord = vUv;\n\t\t\tvec2 dir = vUv - 0.5;\n\n\t\t\tdir *= 1.0 / float(ITERATIONS) * Density;\n\t\t\tfloat illuminationDecay = 1.0;\n\n\t\t\tfloat color = texture2D(uTexture, vUv).a;\n\n\t\t\tfor(int i = 0; i < ITERATIONS; i++) {\n\t\t\t\tcoord -= dir;\n\t\t\t\tfloat col = texture2D(uTexture, coord).a;\n\t\t\t\tcolor += col * illuminationDecay * weight;\n\t\t\t\tilluminationDecay *= Decay;\n\t\t\t}\n\t\t\tgl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n\t\t}\n\t'
	),
	splatShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uTarget;\n\t\tuniform float aspectRatio;\n\t\tuniform vec3 color;\n\t\tuniform vec2 point;\n\t\tuniform float radius;\n\n\t\tvoid main() {\n\t\t\tvec2 p = vUv - point.xy;\n\t\t\tp.x *= aspectRatio;\n\t\t\tvec3 splat = exp(-dot(p, p) / radius) * color;\n\t\t\tvec3 base = texture2D(uTarget, vUv).xyz;\n\t\t\tgl_FragColor = vec4(base + splat, 1.0);\n\t\t}\n\t'
	),
	advectionShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D uVelocity;\n\t\tuniform sampler2D uSource;\n\t\tuniform vec2 texelSize;\n\t\tuniform vec2 dyeTexelSize;\n\t\tuniform float dt;\n\t\tuniform float dissipation;\n\n\t\tvec4 bilerp(sampler2D sam, vec2 uv, vec2 tsize) {\n\t\t\tvec2 st = uv / tsize - 0.5;\n\n\t\t\tvec2 iuv = floor(st);\n\t\t\tvec2 fuv = fract(st);\n\n\t\t\tvec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n\t\t\tvec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n\t\t\tvec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n\t\t\tvec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n\t\t\treturn mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n\t\t}\n\n\t\tvoid main() {\n\t\t\t#ifdef MANUAL_FILTERING\n\t\t\t\tvec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n\t\t\t\tvec4 result = bilerp(uSource, coord, dyeTexelSize);\n\t\t\t#else\n\t\t\t\tvec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n\t\t\t\tvec4 result = texture2D(uSource, coord);\n\t\t\t#endif\n\t\t\t\tfloat decay = 1.0 + dissipation * dt;\n\t\t\t\tgl_FragColor = result / decay;\n\t\t}',
		ext.supportLinearFiltering ? null : ['MANUAL_FILTERING']
	),
	divergenceShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tvarying highp vec2 vL;\n\t\tvarying highp vec2 vR;\n\t\tvarying highp vec2 vT;\n\t\tvarying highp vec2 vB;\n\t\tuniform sampler2D uVelocity;\n\n\t\tvoid main() {\n\t\t\tfloat L = texture2D(uVelocity, vL).x;\n\t\t\tfloat R = texture2D(uVelocity, vR).x;\n\t\t\tfloat T = texture2D(uVelocity, vT).y;\n\t\t\tfloat B = texture2D(uVelocity, vB).y;\n\n\t\t\tvec2 C = texture2D(uVelocity, vUv).xy;\n\t\t\tif(vL.x < 0.0) { L = -C.x; }\n\t\t\tif(vR.x > 1.0) { R = -C.x; }\n\t\t\tif(vT.y > 1.0) { T = -C.y; }\n\t\t\tif(vB.y < 0.0) { B = -C.y; }\n\n\t\t\tfloat div = 0.5 * (R - L + T - B);\n\t\t\tgl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n\t\t}\n\t'
	),
	curlShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tvarying highp vec2 vL;\n\t\tvarying highp vec2 vR;\n\t\tvarying highp vec2 vT;\n\t\tvarying highp vec2 vB;\n\t\tuniform sampler2D uVelocity;\n\n\t\tvoid main() {\n\t\t\tfloat L = texture2D(uVelocity, vL).y;\n\t\t\tfloat R = texture2D(uVelocity, vR).y;\n\t\t\tfloat T = texture2D(uVelocity, vT).x;\n\t\t\tfloat B = texture2D(uVelocity, vB).x;\n\t\t\tfloat vorticity = R - L - T + B;\n\t\t\tgl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n\t\t}\n\t'
	),
	vorticityShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vL;\n\t\tvarying vec2 vR;\n\t\tvarying vec2 vT;\n\t\tvarying vec2 vB;\n\t\tuniform sampler2D uVelocity;\n\t\tuniform sampler2D uCurl;\n\t\tuniform float curl;\n\t\tuniform float dt;\n\n\t\tvoid main() {\n\t\t\tfloat L = texture2D(uCurl, vL).x;\n\t\t\tfloat R = texture2D(uCurl, vR).x;\n\t\t\tfloat T = texture2D(uCurl, vT).x;\n\t\t\tfloat B = texture2D(uCurl, vB).x;\n\t\t\tfloat C = texture2D(uCurl, vUv).x;\n\n\t\t\tvec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n\t\t\tforce /= length(force) + 0.0001;\n\t\t\tforce *= curl * C;\n\t\t\tforce.y *= -1.0;\n\n\t\t\tvec2 vel = texture2D(uVelocity, vUv).xy;\n\t\t\tgl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n\t\t}\n\t'
	),
	pressureShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tvarying highp vec2 vL;\n\t\tvarying highp vec2 vR;\n\t\tvarying highp vec2 vT;\n\t\tvarying highp vec2 vB;\n\t\tuniform sampler2D uPressure;\n\t\tuniform sampler2D uDivergence;\n\n\t\tvoid main() {\n\t\t\tfloat L = texture2D(uPressure, vL).x;\n\t\t\tfloat R = texture2D(uPressure, vR).x;\n\t\t\tfloat T = texture2D(uPressure, vT).x;\n\t\t\tfloat B = texture2D(uPressure, vB).x;\n\t\t\tfloat C = texture2D(uPressure, vUv).x;\n\t\t\tfloat divergence = texture2D(uDivergence, vUv).x;\n\t\t\tfloat pressure = (L + R + B + T - divergence) * 0.25;\n\t\t\tgl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n\t\t}\n\t'
	),
	gradientSubtractShader = compileShader(
		gl.FRAGMENT_SHADER,
		'\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\n\t\tvarying highp vec2 vUv;\n\t\tvarying highp vec2 vL;\n\t\tvarying highp vec2 vR;\n\t\tvarying highp vec2 vT;\n\t\tvarying highp vec2 vB;\n\t\tuniform sampler2D uPressure;\n\t\tuniform sampler2D uVelocity;\n\n\t\tvoid main() {\n\t\t\tfloat L = texture2D(uPressure, vL).x;\n\t\t\tfloat R = texture2D(uPressure, vR).x;\n\t\t\tfloat T = texture2D(uPressure, vT).x;\n\t\t\tfloat B = texture2D(uPressure, vB).x;\n\t\t\tvec2 velocity = texture2D(uVelocity, vUv).xy;\n\t\t\tvelocity.xy -= vec2(R - L, T - B);\n\t\t\tgl_FragColor = vec4(velocity, 0.0, 1.0);\n\t\t}\n\t'
	),
	blit =
		(gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer()),
		gl.bufferData(
			gl.ARRAY_BUFFER,
			new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),
			gl.STATIC_DRAW
		),
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer()),
		gl.bufferData(
			gl.ELEMENT_ARRAY_BUFFER,
			new Uint16Array([0, 1, 2, 0, 2, 3]),
			gl.STATIC_DRAW
		),
		gl.vertexAttribPointer(0, 2, gl.FLOAT, !1, 0, 0),
		gl.enableVertexAttribArray(0),
		function (t) {
			gl.bindFramebuffer(gl.FRAMEBUFFER, t),
				gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
		}),
	bloomFramebuffers = [],
	ditheringTexture = createTextureAsync(
		'https://www.squarerefresh.xyz/assets/plugins/blast-off/assets/LDR_LLL1_0.png'
	),
	blurProgram = new Program(blurVertexShader, blurShader),
	copyProgram = new Program(baseVertexShader, copyShader),
	clearProgram = new Program(baseVertexShader, clearShader),
	colorProgram = new Program(baseVertexShader, colorShader),
	checkerboardProgram = new Program(baseVertexShader, checkerboardShader),
	bloomPrefilterProgram = new Program(baseVertexShader, bloomPrefilterShader),
	bloomBlurProgram = new Program(baseVertexShader, bloomBlurShader),
	bloomFinalProgram = new Program(baseVertexShader, bloomFinalShader),
	sunraysMaskProgram = new Program(baseVertexShader, sunraysMaskShader),
	sunraysProgram = new Program(baseVertexShader, sunraysShader),
	splatProgram = new Program(baseVertexShader, splatShader),
	advectionProgram = new Program(baseVertexShader, advectionShader),
	divergenceProgram = new Program(baseVertexShader, divergenceShader),
	curlProgram = new Program(baseVertexShader, curlShader),
	vorticityProgram = new Program(baseVertexShader, vorticityShader),
	pressureProgram = new Program(baseVertexShader, pressureShader),
	gradienSubtractProgram = new Program(
		baseVertexShader,
		gradientSubtractShader
	),
	displayMaterial = new Material(baseVertexShader, displayShaderSource);
function initFramebuffers() {
	var t = getResolution(config.SIM_RESOLUTION),
		e = getResolution(config.DYE_RESOLUTION),
		r = ext.halfFloatTexType,
		n = ext.formatRGBA,
		i = ext.formatRG,
		o = ext.formatR,
		a = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;
	(dye =
		null == dye
			? createDoubleFBO(e.width, e.height, n.internalFormat, n.format, r, a)
			: resizeDoubleFBO(
					dye,
					e.width,
					e.height,
					n.internalFormat,
					n.format,
					r,
					a
			  )),
		(velocity =
			null == velocity
				? createDoubleFBO(t.width, t.height, i.internalFormat, i.format, r, a)
				: resizeDoubleFBO(
						velocity,
						t.width,
						t.height,
						i.internalFormat,
						i.format,
						r,
						a
				  )),
		(divergence = createFBO(
			t.width,
			t.height,
			o.internalFormat,
			o.format,
			r,
			gl.NEAREST
		)),
		(curl = createFBO(
			t.width,
			t.height,
			o.internalFormat,
			o.format,
			r,
			gl.NEAREST
		)),
		(pressure = createDoubleFBO(
			t.width,
			t.height,
			o.internalFormat,
			o.format,
			r,
			gl.NEAREST
		)),
		initBloomFramebuffers(),
		initSunraysFramebuffers();
}
function initBloomFramebuffers() {
	var t = getResolution(config.BLOOM_RESOLUTION),
		e = ext.halfFloatTexType,
		r = ext.formatRGBA,
		n = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;
	(bloom = createFBO(t.width, t.height, r.internalFormat, r.format, e, n)),
		(bloomFramebuffers.length = 0);
	for (var i = 0; i < config.BLOOM_ITERATIONS; i++) {
		var o = t.width >> (i + 1),
			a = t.height >> (i + 1);
		if (o < 2 || a < 2) break;
		var l = createFBO(o, a, r.internalFormat, r.format, e, n);
		bloomFramebuffers.push(l);
	}
}
function initSunraysFramebuffers() {
	var t = getResolution(config.SUNRAYS_RESOLUTION),
		e = ext.halfFloatTexType,
		r = ext.formatR,
		n = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;
	(sunrays = createFBO(t.width, t.height, r.internalFormat, r.format, e, n)),
		(sunraysTemp = createFBO(
			t.width,
			t.height,
			r.internalFormat,
			r.format,
			e,
			n
		));
}
function createFBO(t, e, r, n, i, o) {
	gl.activeTexture(gl.TEXTURE0);
	var a = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, a),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, o),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, o),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE),
		gl.texImage2D(gl.TEXTURE_2D, 0, r, t, e, 0, n, i, null);
	var l = gl.createFramebuffer();
	return (
		gl.bindFramebuffer(gl.FRAMEBUFFER, l),
		gl.framebufferTexture2D(
			gl.FRAMEBUFFER,
			gl.COLOR_ATTACHMENT0,
			gl.TEXTURE_2D,
			a,
			0
		),
		gl.viewport(0, 0, t, e),
		gl.clear(gl.COLOR_BUFFER_BIT),
		{
			texture: a,
			fbo: l,
			width: t,
			height: e,
			texelSizeX: 1 / t,
			texelSizeY: 1 / e,
			attach: function (t) {
				return (
					gl.activeTexture(gl.TEXTURE0 + t), gl.bindTexture(gl.TEXTURE_2D, a), t
				);
			},
		}
	);
}
function createDoubleFBO(t, e, r, n, i, o) {
	var a = createFBO(t, e, r, n, i, o),
		l = createFBO(t, e, r, n, i, o);
	return {
		width: t,
		height: e,
		texelSizeX: a.texelSizeX,
		texelSizeY: a.texelSizeY,
		get read() {
			return a;
		},
		set read(t) {
			a = t;
		},
		get write() {
			return l;
		},
		set write(t) {
			l = t;
		},
		swap: function () {
			var t = a;
			(a = l), (l = t);
		},
	};
}
function resizeFBO(t, e, r, n, i, o, a) {
	var l = createFBO(e, r, n, i, o, a);
	return (
		copyProgram.bind(),
		gl.uniform1i(copyProgram.uniforms.uTexture, t.attach(0)),
		blit(l.fbo),
		l
	);
}
function resizeDoubleFBO(t, e, r, n, i, o, a) {
	return t.width == e && t.height == r
		? t
		: ((t.read = resizeFBO(t.read, e, r, n, i, o, a)),
		  (t.write = createFBO(e, r, n, i, o, a)),
		  (t.width = e),
		  (t.height = r),
		  (t.texelSizeX = 1 / e),
		  (t.texelSizeY = 1 / r),
		  t);
}
function createTextureAsync(t) {
	var e = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, e),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT),
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT),
		gl.texImage2D(
			gl.TEXTURE_2D,
			0,
			gl.RGB,
			1,
			1,
			0,
			gl.RGB,
			gl.UNSIGNED_BYTE,
			new Uint8Array([255, 255, 255])
		);
	var r = {
			texture: e,
			width: 1,
			height: 1,
			attach: function (t) {
				return (
					gl.activeTexture(gl.TEXTURE0 + t), gl.bindTexture(gl.TEXTURE_2D, e), t
				);
			},
		},
		n = new Image();
	return (
		((n = new Image()).crossOrigin = 'anonymous'),
		(n.onload = function () {
			(r.width = n.width),
				(r.height = n.height),
				gl.bindTexture(gl.TEXTURE_2D, e),
				gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, n);
		}),
		(n.src = t),
		r
	);
}
function updateKeywords() {
	var t = [];
	config.SHADING && t.push('SHADING'),
		config.BLOOM && t.push('BLOOM'),
		config.SUNRAYS && t.push('SUNRAYS'),
		displayMaterial.setKeywords(t);
}
var lastUpdateTime = Date.now(),
	colorUpdateTimer = 0;
function init() {
	updateKeywords(), initFramebuffers();
}
function runUpdate() {
	(lastUpdateTime = Date.now()), (colorUpdateTimer = 0), update();
}
function update() {
	var t = calcDeltaTime();
	resizeCanvas() && initFramebuffers(),
		updateColors(t),
		applyInputs(),
		config.PAUSED || step(t),
		render(null),
		requestAnimationFrame(update);
}
function calcDeltaTime() {
	var t = Date.now(),
		e = (t - lastUpdateTime) / 1e3;
	return (e = Math.min(e, 0.016666)), (lastUpdateTime = t), e;
}
function resizeCanvas() {
	var t = scaleByPixelRatio(canvas.clientWidth),
		e = scaleByPixelRatio(canvas.clientHeight);
	return (
		(canvas.width != t || canvas.height != e) &&
		((canvas.width = t), (canvas.height = e), !0)
	);
}
function updateColors(t) {
	config.COLORFUL &&
		(colorUpdateTimer += t * config.COLOR_UPDATE_SPEED) >= 1 &&
		((colorUpdateTimer = wrap(colorUpdateTimer, 0, 1)),
		pointers.forEach(function (t) {
			t.color = generateColor();
		}));
}
function applyInputs() {
	pointers.forEach(function (t) {
		t.moved && ((t.moved = !1), splatPointer(t));
	});
}
function step(t) {
	gl.disable(gl.BLEND),
		gl.viewport(0, 0, velocity.width, velocity.height),
		curlProgram.bind(),
		gl.uniform2f(
			curlProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0)),
		blit(curl.fbo),
		vorticityProgram.bind(),
		gl.uniform2f(
			vorticityProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0)),
		gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1)),
		gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL),
		gl.uniform1f(vorticityProgram.uniforms.dt, t),
		blit(velocity.write.fbo),
		velocity.swap(),
		divergenceProgram.bind(),
		gl.uniform2f(
			divergenceProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0)),
		blit(divergence.fbo),
		clearProgram.bind(),
		gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0)),
		gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE),
		blit(pressure.write.fbo),
		pressure.swap(),
		pressureProgram.bind(),
		gl.uniform2f(
			pressureProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));
	for (var e = 0; e < config.PRESSURE_ITERATIONS; e++)
		gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1)),
			blit(pressure.write.fbo),
			pressure.swap();
	gradienSubtractProgram.bind(),
		gl.uniform2f(
			gradienSubtractProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		gl.uniform1i(
			gradienSubtractProgram.uniforms.uPressure,
			pressure.read.attach(0)
		),
		gl.uniform1i(
			gradienSubtractProgram.uniforms.uVelocity,
			velocity.read.attach(1)
		),
		blit(velocity.write.fbo),
		velocity.swap(),
		advectionProgram.bind(),
		gl.uniform2f(
			advectionProgram.uniforms.texelSize,
			velocity.texelSizeX,
			velocity.texelSizeY
		),
		ext.supportLinearFiltering ||
			gl.uniform2f(
				advectionProgram.uniforms.dyeTexelSize,
				velocity.texelSizeX,
				velocity.texelSizeY
			);
	var r = velocity.read.attach(0);
	gl.uniform1i(advectionProgram.uniforms.uVelocity, r),
		gl.uniform1i(advectionProgram.uniforms.uSource, r),
		gl.uniform1f(advectionProgram.uniforms.dt, t),
		gl.uniform1f(
			advectionProgram.uniforms.dissipation,
			config.VELOCITY_DISSIPATION
		),
		blit(velocity.write.fbo),
		velocity.swap(),
		gl.viewport(0, 0, dye.width, dye.height),
		ext.supportLinearFiltering ||
			gl.uniform2f(
				advectionProgram.uniforms.dyeTexelSize,
				dye.texelSizeX,
				dye.texelSizeY
			),
		gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0)),
		gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1)),
		gl.uniform1f(
			advectionProgram.uniforms.dissipation,
			config.DENSITY_DISSIPATION
		),
		blit(dye.write.fbo),
		dye.swap();
}
function render(t) {
	config.BLOOM && applyBloom(dye.read, bloom),
		config.SUNRAYS &&
			(applySunrays(dye.read, dye.write, sunrays),
			blur(sunrays, sunraysTemp, 1)),
		null != t && config.TRANSPARENT
			? gl.disable(gl.BLEND)
			: (gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA), gl.enable(gl.BLEND));
	var e = null == t ? gl.drawingBufferWidth : t.width,
		r = null == t ? gl.drawingBufferHeight : t.height;
	gl.viewport(0, 0, e, r);
	var n = null == t ? null : t.fbo;
	config.TRANSPARENT || drawColor(n, normalizeColor(config.BACK_COLOR)),
		drawDisplay(n, e, r);
}
function drawColor(t, e) {
	colorProgram.bind(),
		gl.uniform4f(colorProgram.uniforms.color, e.r, e.g, e.b, 1),
		blit(t);
}
function drawDisplay(t, e, r) {
	if (
		(displayMaterial.bind(),
		config.SHADING &&
			gl.uniform2f(displayMaterial.uniforms.texelSize, 1 / e, 1 / r),
		gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0)),
		config.BLOOM)
	) {
		gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1)),
			gl.uniform1i(
				displayMaterial.uniforms.uDithering,
				ditheringTexture.attach(2)
			);
		var n = getTextureScale(ditheringTexture, e, r);
		gl.uniform2f(displayMaterial.uniforms.ditherScale, n.x, n.y);
	}
	config.SUNRAYS &&
		gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3)),
		blit(t);
}
function applyBloom(t, e) {
	if (!(bloomFramebuffers.length < 2)) {
		var r = e;
		gl.disable(gl.BLEND), bloomPrefilterProgram.bind();
		var n = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 1e-4,
			i = config.BLOOM_THRESHOLD - n,
			o = 2 * n,
			a = 0.25 / n;
		gl.uniform3f(bloomPrefilterProgram.uniforms.curve, i, o, a),
			gl.uniform1f(
				bloomPrefilterProgram.uniforms.threshold,
				config.BLOOM_THRESHOLD
			),
			gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, t.attach(0)),
			gl.viewport(0, 0, r.width, r.height),
			blit(r.fbo),
			bloomBlurProgram.bind();
		for (var l = 0; l < bloomFramebuffers.length; l++) {
			var u = bloomFramebuffers[l];
			gl.uniform2f(
				bloomBlurProgram.uniforms.texelSize,
				r.texelSizeX,
				r.texelSizeY
			),
				gl.uniform1i(bloomBlurProgram.uniforms.uTexture, r.attach(0)),
				gl.viewport(0, 0, u.width, u.height),
				blit(u.fbo),
				(r = u);
		}
		gl.blendFunc(gl.ONE, gl.ONE), gl.enable(gl.BLEND);
		for (var c = bloomFramebuffers.length - 2; c >= 0; c--) {
			var g = bloomFramebuffers[c];
			gl.uniform2f(
				bloomBlurProgram.uniforms.texelSize,
				r.texelSizeX,
				r.texelSizeY
			),
				gl.uniform1i(bloomBlurProgram.uniforms.uTexture, r.attach(0)),
				gl.viewport(0, 0, g.width, g.height),
				blit(g.fbo),
				(r = g);
		}
		gl.disable(gl.BLEND),
			bloomFinalProgram.bind(),
			gl.uniform2f(
				bloomFinalProgram.uniforms.texelSize,
				r.texelSizeX,
				r.texelSizeY
			),
			gl.uniform1i(bloomFinalProgram.uniforms.uTexture, r.attach(0)),
			gl.uniform1f(
				bloomFinalProgram.uniforms.intensity,
				config.BLOOM_INTENSITY
			),
			gl.viewport(0, 0, e.width, e.height),
			blit(e.fbo);
	}
}
function applySunrays(t, e, r) {
	gl.disable(gl.BLEND),
		sunraysMaskProgram.bind(),
		gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, t.attach(0)),
		gl.viewport(0, 0, e.width, e.height),
		blit(e.fbo),
		sunraysProgram.bind(),
		gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT),
		gl.uniform1i(sunraysProgram.uniforms.uTexture, e.attach(0)),
		gl.viewport(0, 0, r.width, r.height),
		blit(r.fbo);
}
function blur(t, e, r) {
	blurProgram.bind();
	for (var n = 0; n < r; n++)
		gl.uniform2f(blurProgram.uniforms.texelSize, t.texelSizeX, 0),
			gl.uniform1i(blurProgram.uniforms.uTexture, t.attach(0)),
			blit(e.fbo),
			gl.uniform2f(blurProgram.uniforms.texelSize, 0, t.texelSizeY),
			gl.uniform1i(blurProgram.uniforms.uTexture, e.attach(0)),
			blit(t.fbo);
}
function splatPointer(t) {
	var e = t.deltaX * config.SPLAT_FORCE,
		r = t.deltaY * config.SPLAT_FORCE;
	splat(t.texcoordX, t.texcoordY, e, r, t.color);
}
function splat(t, e, r, n, i) {
	gl.viewport(0, 0, velocity.width, velocity.height),
		splatProgram.bind(),
		gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0)),
		gl.uniform1f(
			splatProgram.uniforms.aspectRatio,
			canvas.width / canvas.height
		),
		gl.uniform2f(splatProgram.uniforms.point, t, e),
		gl.uniform3f(splatProgram.uniforms.color, r, n, 0),
		gl.uniform1f(
			splatProgram.uniforms.radius,
			correctRadius(config.SPLAT_RADIUS / 100)
		),
		blit(velocity.write.fbo),
		velocity.swap(),
		gl.viewport(0, 0, dye.width, dye.height),
		gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0)),
		gl.uniform3f(splatProgram.uniforms.color, i.r, i.g, i.b),
		blit(dye.write.fbo),
		dye.swap();
}
function correctRadius(t) {
	var e = canvas.width / canvas.height;
	return e > 1 && (t *= e), t;
}
var flag = !1;
function updatePointerDownData(t, e, r, n) {
	(t.id = e),
		(t.down = !0),
		(t.moved = !1),
		(t.texcoordX = r / canvas.width),
		(t.texcoordY = 1 - n / canvas.height),
		(t.prevTexcoordX = t.texcoordX),
		(t.prevTexcoordY = t.texcoordY),
		(t.deltaX = 0),
		(t.deltaY = 0),
		(t.color = generateColor());
}
function updatePointerMoveData(t, e, r) {
	(t.prevTexcoordX = t.texcoordX),
		(t.prevTexcoordY = t.texcoordY),
		(t.texcoordX = e / canvas.width),
		(t.texcoordY = 1 - r / canvas.height),
		(t.deltaX = correctDeltaX(t.texcoordX - t.prevTexcoordX)),
		(t.deltaY = correctDeltaY(t.texcoordY - t.prevTexcoordY)),
		(t.moved = Math.abs(t.deltaX) > 0 || Math.abs(t.deltaY) > 0);
}
function updatePointerUpData(t) {
	t.down = !1;
}
function correctDeltaX(t) {
	var e = canvas.width / canvas.height;
	return e < 1 && (t *= e), t;
}
function correctDeltaY(t) {
	var e = canvas.width / canvas.height;
	return e > 1 && (t /= e), t;
}
function generateColor() {
	var t = HSVtoRGB(Math.random(), 1, 1);
	return (t.r *= 0.15), (t.g *= 0.15), (t.b *= 0.15), t;
}
function HSVtoRGB(t, e, r) {
	var n, i, o, a, l, u, c, g;
	switch (
		((u = r * (1 - e)),
		(c = r * (1 - (l = 6 * t - (a = Math.floor(6 * t))) * e)),
		(g = r * (1 - (1 - l) * e)),
		a % 6)
	) {
		case 0:
			(n = r), (i = g), (o = u);
			break;
		case 1:
			(n = c), (i = r), (o = u);
			break;
		case 2:
			(n = u), (i = r), (o = g);
			break;
		case 3:
			(n = u), (i = c), (o = r);
			break;
		case 4:
			(n = g), (i = u), (o = r);
			break;
		case 5:
			(n = r), (i = u), (o = c);
	}
	return { r: n, g: i, b: o };
}
function normalizeColor(t) {
	return { r: t.r / 255, g: t.g / 255, b: t.b / 255 };
}
function wrap(t, e, r) {
	var n = r - e;
	return 0 == n ? e : ((t - e) % n) + e;
}
function getResolution(t) {
	var e = gl.drawingBufferWidth / gl.drawingBufferHeight;
	e < 1 && (e = 1 / e);
	var r = Math.round(t),
		n = Math.round(t * e);
	return gl.drawingBufferWidth > gl.drawingBufferHeight
		? { width: n, height: r }
		: { width: r, height: n };
}
function getTextureScale(t, e, r) {
	return { x: e / t.width, y: r / t.height };
}
function getTextureScale(t, e, r) {
	return { x: e / t.width, y: r / t.height };
}
function scaleByPixelRatio(t) {
	var e = window.devicePixelRatio || 1;
	return Math.floor(t * e);
}
function hashCode(t) {
	if (0 == t.length) return 0;
	for (var e = 0, r = 0; r < t.length; r++)
		(e = (e << 5) - e + t.charCodeAt(r)), (e |= 0);
	return e;
}
window.addEventListener('mousemove', function (t) {
	if (flag) {
		updatePointerMoveData(
			(e = pointers[0]),
			(r = scaleByPixelRatio(t.clientX)),
			(n = scaleByPixelRatio(t.clientY))
		);
	} else {
		var e,
			r = scaleByPixelRatio(t.clientX),
			n = scaleByPixelRatio(t.clientY);
		null == (e = pointers.find((t) => -1 == t.id)) &&
			(e = new pointerPrototype()),
			updatePointerDownData(e, -1, r, n),
			(flag = !0);
	}
}),
	window.addEventListener('touchstart', function (t) {
		t.preventDefault();
		for (var e = t.targetTouches; e.length >= pointers.length; )
			pointers.push(new pointerPrototype());
		for (var r = 0; r < e.length; r++) {
			var n = scaleByPixelRatio(e[r].clientX),
				i = scaleByPixelRatio(e[r].clientY);
			updatePointerDownData(pointers[r + 1], e[r].identifier, n, i);
		}
	}),
	window.addEventListener(
		'touchmove',
		function (t) {
			t.preventDefault();
			for (var e = t.targetTouches, r = 0; r < e.length; r++) {
				var n = pointers[r + 1];
				if (n.down)
					updatePointerMoveData(
						n,
						scaleByPixelRatio(e[r].clientX),
						scaleByPixelRatio(e[r].clientY)
					);
			}
		},
		!1
	),
	window.addEventListener('touchend', function (t) {
		for (
			var e = t.changedTouches,
				r = function (t) {
					var r = pointers.find(function (r) {
						return r.id == e[t].identifier;
					});
					null != r && updatePointerUpData(r);
				},
				n = 0;
			n < e.length;
			n++
		)
			r(n);
	}),
	document.addEventListener(
		'DOMContentLoaded',
		function t() {
			document.removeEventListener('DOMContentLoaded', t, !1),
				setTimeout(function () {
					canvas && (init(), runUpdate());
				}, 16);
		},
		!1
	);
